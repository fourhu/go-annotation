// +build !ignore_autogenerated

package examples

import (
	"encoding/json"

	"github.com/u2takey/go-annotation/pkg/lib"
	plugin "github.com/u2takey/go-annotation/pkg/plugin"
	"k8s.io/klog"
)

func init() {
	b := new(plugin.Description)
	err := json.Unmarshal([]byte("{\"body\":\"a\"}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(A), b)
}

func (s *A) GetDescription() string {
	return "A"
}

func init() {
	b := new(plugin.Description)
	err := json.Unmarshal([]byte("{\"body\":\"b\"}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(B), b)
}

func (s *B) GetDescription() string {
	return "B"
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ComponentA), b)
}

var NewComponentAFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return new(ComponentA), nil },
	Singleton: false,
}

func init() {
	lib.RegisterType(new(ComponentA), NewComponentAFunction)
}

func ProvideComponentA() (*ComponentA, error) {
	r, err := lib.Provide(new(ComponentA))
	if err != nil {
		return nil, err
	}
	return r.(*ComponentA), nil
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{\"type\": \"Singleton\"}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ComponentB), b)
}

var NewComponentBFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return new(ComponentB), nil },
	Singleton: true,
}

func init() {
	lib.RegisterType(new(ComponentB), NewComponentBFunction)
}

func ProvideComponentB() (*ComponentB, error) {
	r, err := lib.Provide(new(ComponentB))
	if err != nil {
		return nil, err
	}
	return r.(*ComponentB), nil
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ComponentC), b)
}

var NewComponentCFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return NewComponentC(), nil },
	Singleton: false,
}

func init() {
	lib.RegisterType(new(ComponentC), NewComponentCFunction)
}

func ProvideComponentC() (*ComponentC, error) {
	r, err := lib.Provide(new(ComponentC))
	if err != nil {
		return nil, err
	}
	return r.(*ComponentC), nil
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ComponentD), b)
}

var NewComponentDFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return NewComponentD() },
	Singleton: false,
}

func init() {
	lib.RegisterType(new(ComponentD), NewComponentDFunction)
}

func ProvideComponentD() (*ComponentD, error) {
	r, err := lib.Provide(new(ComponentD))
	if err != nil {
		return nil, err
	}
	return r.(*ComponentD), nil
}
