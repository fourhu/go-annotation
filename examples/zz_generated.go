//go:build !ignore_autogenerated
// +build !ignore_autogenerated

package examples

import (
	"context"
	"encoding/json"

	"github.com/fourhu/go-annotation/pkg/lib"
	"github.com/fourhu/go-annotation/pkg/middleware"
	plugin "github.com/fourhu/go-annotation/pkg/plugin"
	"github.com/mj37yhyy/gowb/pkg/model"
	"github.com/mj37yhyy/gowb/pkg/web"
	"k8s.io/klog"
)

func (handler *ApplicationHandlerService) CreateService(ctx context.Context) (model.Response, web.HttpStatus) {
	var (
		ret0 model.Response
		ret1 web.HttpStatus
		err  error
	)
	middleware.Before(ctx, handler.Order)

	ret0, ret1, err = ValidateCreateService(ctx)
	if err != nil {
		return ret0, ret1
	}

	ret0, ret1 = handler.ApplicationHandler.CreateService(ctx)
	middleware.After(ctx, handler.Order, ret0, ret1)
	return ret0, ret1
}

func (handler *ApplicationHandlerService) DeleteService(ctx context.Context) (model.Response, web.HttpStatus) {
	var (
		ret0 model.Response
		ret1 web.HttpStatus
	)
	middleware.Before(ctx, handler.Order)

	ret0, ret1 = handler.ApplicationHandler.DeleteService(ctx)
	middleware.After(ctx, handler.Order, ret0, ret1)
	return ret0, ret1
}

func (handler *ApplicationHandlerService) ModifyService(ctx context.Context) (model.Response, web.HttpStatus) {
	var (
		ret0 model.Response
		ret1 web.HttpStatus
	)
	middleware.Before(ctx, handler.Order)

	ret0, ret1 = handler.ApplicationHandler.ModifyService(ctx)
	middleware.After(ctx, handler.Order, ret0, ret1)
	return ret0, ret1
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ApplicationHandler), b)
}

var NewApplicationHandlerFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return new(ApplicationHandler), nil },
	Singleton: false,
}

func init() {
	lib.RegisterType(new(ApplicationHandler), NewApplicationHandlerFunction)
}

func ProvideApplicationHandler() (*ApplicationHandler, error) {
	r, err := lib.Provide(new(ApplicationHandler))
	if err != nil {
		return nil, err
	}
	return r.(*ApplicationHandler), nil
}

func init() {
	b := new(plugin.Component)
	err := json.Unmarshal([]byte("{}"), b)
	if err != nil {
		klog.Fatal("unmarshal json failed", err)
		return
	}
	lib.RegisterAnnotation(new(ApplicationHandlerService), b)
}

var NewApplicationHandlerServiceFunction = &lib.NewFunction{
	F:         func() (interface{}, error) { return new(ApplicationHandlerService), nil },
	Singleton: false,
}

func init() {
	lib.RegisterType(new(ApplicationHandlerService), NewApplicationHandlerServiceFunction)
}

func ProvideApplicationHandlerService() (*ApplicationHandlerService, error) {
	r, err := lib.Provide(new(ApplicationHandlerService))
	if err != nil {
		return nil, err
	}
	return r.(*ApplicationHandlerService), nil
}
